{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n/* eslint-disable max-len */ /* eslint-disable no-shadow */ \"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.state = initialState;\n        this.board = initialState || this._generateEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\"; // 'idle', 'playing', 'win', 'lose'\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            /*\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ // генерація первинної пустої дошки для гри\n            key: \"_generateEmptyBoard\",\n            value: function _generateEmptyBoard() {\n                return [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n            }\n        },\n        {\n            // основний метод для переміщення\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var i = 0; i < 4; i++){\n                    var line = this.board[i];\n                    var newLine = this._slideAndMerge(line);\n                    // перевірка чи змінилась дошка\n                    if (newLine.join(\"\") !== line.join(\"\")) moved = true;\n                    this.board[i] = newLine;\n                }\n                // якщо була зміщена лінія, то додається\n                // рандомна плитка та перевіряється статус гри\n                if (moved) {\n                    this._addRandomTile();\n                    this._checkGameStatus();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                this.board = this.board.map(function(row) {\n                    return row.reverse();\n                }); // обертаємо дошку\n                this.moveLeft();\n                this.board = this.board.map(function(row) {\n                    return row.reverse();\n                });\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                // eslint-disable-next-line max-len\n                this._transposeBoard(); // транспонуємо матрицю, щоб використати метод moveLeft\n                this.moveLeft();\n                this._transposeBoard();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                this._transposeBoard();\n                this.board = this.board.map(function(row) {\n                    return row.reverse();\n                });\n                this.moveLeft();\n                this.board = this.board.map(function(row) {\n                    return row.reverse();\n                });\n                this._transposeBoard();\n            }\n        },\n        {\n            // метод для зсуву і злиття комірок\n            key: \"_slideAndMerge\",\n            value: function _slideAndMerge(line) {\n                var newLine = line.filter(function(val) {\n                    return val;\n                }); // видаляємо нулі\n                for(var i = 0; i < newLine.length - 1; i++)if (newLine[i] === newLine[i + 1]) {\n                    newLine[i] *= 2;\n                    this.score += newLine[i]; // додаємо очки\n                    newLine[i + 1] = 0;\n                }\n                newLine = newLine.filter(function(val) {\n                    return val;\n                }); // видаляємо злиті комірки\n                while(newLine.length < 4)newLine.push(0); // заповнємо нулями нулями\n                return newLine;\n            }\n        },\n        {\n            // транспонування\n            key: \"_transposeBoard\",\n            value: function _transposeBoard() {\n                var newBoard = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                for(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++)newBoard[i][j] = this.board[j][i];\n                this.board = newBoard;\n            }\n        },\n        {\n            // отримання кількості очок\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            // отримання дошки для гри\n            key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            // отримання статусу гру\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            // початок гри\n            key: \"start\",\n            value: function start() {\n                this.board = this._generateEmptyBoard(); // Ensure the board is empty\n                this.score = 0;\n                this.status = \"playing\";\n                this._addRandomTile(); // Add one tile\n                this._addRandomTile(); // Add another tile\n                this._checkGameStatus(); // Check if game status needs to be updated\n            }\n        },\n        {\n            // Restart the game\n            key: \"restart\",\n            value: function restart() {\n                this.start(); // Use the start method to reset and initialize the game\n            }\n        },\n        {\n            // Add your own methods here\n            // створення рандомної дощечки\n            key: \"_addRandomTile\",\n            value: function _addRandomTile() {\n                var emptyCells = [];\n                // пошук усіх пустих дощечок\n                for(var row = 0; row < 4; row++){\n                    for(var col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                // добавлення рандомного числа 2/4 в одну з пустих комірок\n                if (emptyCells.length > 0) {\n                    var randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n                    this.board[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            // зміна статусу гри win/lose\n            key: \"_checkGameStatus\",\n            value: function _checkGameStatus() {\n                if (this.board.some(function(row) {\n                    return row.includes(2048);\n                })) this.status = \"win\";\n                if (this._noMoreMoves()) this.status = \"lose\";\n            }\n        },\n        {\n            // перевірка чи є ще можливі кроки у грі. повертає boolean\n            key: \"_noMoreMoves\",\n            value: function _noMoreMoves() {\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    // перевіряє наявність порожніх клітинок\n                    if (this.board[row][col] === 0) return false;\n                    // перевіряє чи можливо об'єднати дві сусідні дощечки по колонках\n                    if (col < 3 && this.board[row][col] === this.board[row][col + 1]) return false;\n                    // перевіряє чи можливо об'єднати дві сусідні дощечки по рядках\n                    if (row < 3 && this.board[row][col] === this.board[row + 1][col]) return false;\n                }\n                return true;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n// Write your code here\n// console.log(game.getState());\n// game.moveLeft();\n// console.log(game.getState());\ndocument.addEventListener(\"keydown\", function(event) {\n    switch(event.key){\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n    }\n    $197cd56b15c33885$var$workingWithHTMLFile();\n});\nfunction $197cd56b15c33885$var$workingWithHTMLFile() {\n    // Update the board display\n    var board = $197cd56b15c33885$var$game.getState();\n    var cells = document.querySelectorAll(\".field-cell\");\n    cells.forEach(function(cell, i) {\n        var value = board[Math.floor(i / 4)][i % 4];\n        cell.textContent = value || \"\";\n        cell.className = \"field-cell \".concat(value ? \"field-cell--\".concat(value) : \"\");\n    });\n    // Update the game status message\n    var status = $197cd56b15c33885$var$game.getStatus();\n    document.querySelector(\".message-win\").classList.toggle(\"hidden\", status !== \"win\");\n    document.querySelector(\".message-lose\").classList.toggle(\"hidden\", status !== \"lose\");\n    document.querySelector(\".message-start\").classList.toggle(\"hidden\", status === \"playing\");\n    // Button functionality\n    var button = document.querySelector(\".button\");\n    button.removeEventListener(\"click\", $197cd56b15c33885$var$handleButtonClick); // Remove previous event listener\n    button.addEventListener(\"click\", $197cd56b15c33885$var$handleButtonClick); // Add new event listener\n    if (status === \"playing\") {\n        button.classList.remove(\"start\");\n        button.classList.add(\"restart\");\n        button.textContent = \"Restart\";\n    } else {\n        button.classList.remove(\"restart\");\n        button.classList.add(\"start\");\n        button.textContent = \"Start\";\n    }\n    // Update the score display\n    document.querySelector(\".game-score\").textContent = $197cd56b15c33885$var$game.getScore();\n}\nfunction $197cd56b15c33885$var$handleButtonClick(event) {\n    event.preventDefault(); // Prevent default action\n    if ($197cd56b15c33885$var$game.getStatus() === \"playing\") $197cd56b15c33885$var$game.restart(); // Restart the game if currently playing\n    else $197cd56b15c33885$var$game.start(); // Start a new game if not playing\n    $197cd56b15c33885$var$workingWithHTMLFile(); // Update the display\n}\n// Initialize the board display\n$197cd56b15c33885$var$workingWithHTMLFile();\n\n})();\n//# sourceMappingURL=index.176ce8b4.js.map\n","/* eslint-disable max-len */\n/* eslint-disable no-shadow */\n'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\n// console.log(game.getState());\n// game.moveLeft();\n// console.log(game.getState());\n\ndocument.addEventListener('keydown', (event) => {\n  switch (event.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n\n  workingWithHTMLFile();\n});\n\nfunction workingWithHTMLFile() {\n  // Update the board display\n  const board = game.getState();\n  const cells = document.querySelectorAll('.field-cell');\n\n  cells.forEach((cell, i) => {\n    const value = board[Math.floor(i / 4)][i % 4];\n\n    cell.textContent = value || '';\n    cell.className = `field-cell ${value ? `field-cell--${value}` : ''}`;\n  });\n\n  // Update the game status message\n  const status = game.getStatus();\n\n  document.querySelector('.message-win').classList.toggle('hidden', status !== 'win');\n  document.querySelector('.message-lose').classList.toggle('hidden', status !== 'lose');\n  document.querySelector('.message-start').classList.toggle('hidden', status === 'playing');\n\n  // Button functionality\n  const button = document.querySelector('.button');\n\n  button.removeEventListener('click', handleButtonClick); // Remove previous event listener\n  button.addEventListener('click', handleButtonClick); // Add new event listener\n\n  if (status === 'playing') {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  } else {\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n  }\n\n  // Update the score display\n  document.querySelector('.game-score').textContent = game.getScore();\n}\n\nfunction handleButtonClick(event) {\n  event.preventDefault(); // Prevent default action\n\n  if (game.getStatus() === 'playing') {\n    game.restart(); // Restart the game if currently playing\n  } else {\n    game.start(); // Start a new game if not playing\n  }\n\n  workingWithHTMLFile(); // Update the display\n}\n\n// Initialize the board display\nworkingWithHTMLFile();\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.state = initialState;\n    this.board = initialState || this._generateEmptyBoard();\n    this.score = 0;\n    this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n  }\n  /*\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n\n  // генерація первинної пустої дошки для гри\n  _generateEmptyBoard() {\n    return [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  }\n\n  // основний метод для переміщення\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = 0; i < 4; i++) {\n      const line = this.board[i];\n      const newLine = this._slideAndMerge(line);\n\n      // перевірка чи змінилась дошка\n      if (newLine.join('') !== line.join('')) {\n        moved = true;\n      }\n      this.board[i] = newLine;\n    }\n\n    // якщо була зміщена лінія, то додається\n    // рандомна плитка та перевіряється статус гри\n    if (moved) {\n      this._addRandomTile();\n      this._checkGameStatus();\n    }\n  }\n\n  moveRight() {\n    this.board = this.board.map((row) => row.reverse()); // обертаємо дошку\n    this.moveLeft();\n    this.board = this.board.map((row) => row.reverse());\n  }\n\n  moveUp() {\n    // eslint-disable-next-line max-len\n    this._transposeBoard(); // транспонуємо матрицю, щоб використати метод moveLeft\n    this.moveLeft();\n    this._transposeBoard();\n  }\n\n  moveDown() {\n    this._transposeBoard();\n    this.board = this.board.map((row) => row.reverse());\n    this.moveLeft();\n    this.board = this.board.map((row) => row.reverse());\n    this._transposeBoard();\n  }\n\n  // метод для зсуву і злиття комірок\n  _slideAndMerge(line) {\n    let newLine = line.filter((val) => val); // видаляємо нулі\n\n    for (let i = 0; i < newLine.length - 1; i++) {\n      if (newLine[i] === newLine[i + 1]) {\n        newLine[i] *= 2;\n        this.score += newLine[i]; // додаємо очки\n        newLine[i + 1] = 0;\n      }\n    }\n\n    newLine = newLine.filter((val) => val); // видаляємо злиті комірки\n\n    while (newLine.length < 4) {\n      newLine.push(0); // заповнємо нулями нулями\n    }\n\n    return newLine;\n  }\n\n  // транспонування\n  _transposeBoard() {\n    const newBoard = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        newBoard[i][j] = this.board[j][i];\n      }\n    }\n\n    this.board = newBoard;\n  }\n\n  // отримання кількості очок\n  getScore() {\n    return this.score;\n  }\n\n  // отримання дошки для гри\n  getState() {\n    return this.board;\n  }\n\n  // отримання статусу гру\n  getStatus() {\n    return this.status;\n  }\n\n  // початок гри\n  start() {\n    this.board = this._generateEmptyBoard(); // Ensure the board is empty\n    this.score = 0;\n    this.status = 'playing';\n    this._addRandomTile(); // Add one tile\n    this._addRandomTile(); // Add another tile\n    this._checkGameStatus(); // Check if game status needs to be updated\n  }\n\n  // Restart the game\n  restart() {\n    this.start(); // Use the start method to reset and initialize the game\n  }\n\n  // Add your own methods here\n\n  // створення рандомної дощечки\n  _addRandomTile() {\n    const emptyCells = [];\n\n    // пошук усіх пустих дощечок\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({\n            row, col,\n          });\n        }\n      }\n    }\n\n    // добавлення рандомного числа 2/4 в одну з пустих комірок\n    if (emptyCells.length > 0) {\n      const randomCell\n        = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  // зміна статусу гри win/lose\n  _checkGameStatus() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    }\n\n    if (this._noMoreMoves()) {\n      this.status = 'lose';\n    }\n  }\n\n  // перевірка чи є ще можливі кроки у грі. повертає boolean\n  _noMoreMoves() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        // перевіряє наявність порожніх клітинок\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n\n        // перевіряє чи можливо об'єднати дві сусідні дощечки по колонках\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return false;\n        }\n\n        // перевіряє чи можливо об'єднати дві сусідні дощечки по рядках\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","length","instance","Constructor","TypeError","state","board","_generateEmptyBoard","score","status","key","value","moved","i","line","newLine","_slideAndMerge","join","_addRandomTile","_checkGameStatus","map","row","reverse","moveLeft","_transposeBoard","filter","val","push","newBoard","j","start","emptyCells","col","randomCell","Math","floor","random","some","includes","_noMoreMoves","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","$197cd56b15c33885$var$workingWithHTMLFile","getState","cells","document","querySelectorAll","forEach","cell","textContent","className","concat","getStatus","querySelector","classList","toggle","button","removeEventListener","$197cd56b15c33885$var$handleButtonClick","addEventListener","remove","add","getScore","event","preventDefault","restart","moveRight","moveUp","moveDown"],"version":3,"file":"index.176ce8b4.js.map"}