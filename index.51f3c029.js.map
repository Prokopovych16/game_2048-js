{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["/* eslint-disable max-len */ /* eslint-disable no-shadow */ \"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.state = initialState;\n        this.board = initialState || this._generateEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\"; // 'idle', 'playing', 'win', 'lose'\n    }\n    /*\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ // генерація первинної пустої дошки для гри\n    _generateEmptyBoard() {\n        return [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n    }\n    // основний метод для переміщення\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let i = 0; i < 4; i++){\n            const line = this.board[i];\n            const newLine = this._slideAndMerge(line);\n            // перевірка чи змінилась дошка\n            if (newLine.join(\"\") !== line.join(\"\")) moved = true;\n            this.board[i] = newLine;\n        }\n        // якщо була зміщена лінія, то додається\n        // рандомна плитка та перевіряється статус гри\n        if (moved) {\n            this._addRandomTile();\n            this._checkGameStatus();\n        }\n    }\n    moveRight() {\n        this.board = this.board.map((row)=>row.reverse()); // обертаємо дошку\n        this.moveLeft();\n        this.board = this.board.map((row)=>row.reverse());\n    }\n    moveUp() {\n        // eslint-disable-next-line max-len\n        this._transposeBoard(); // транспонуємо матрицю, щоб використати метод moveLeft\n        this.moveLeft();\n        this._transposeBoard();\n    }\n    moveDown() {\n        this._transposeBoard();\n        this.board = this.board.map((row)=>row.reverse());\n        this.moveLeft();\n        this.board = this.board.map((row)=>row.reverse());\n        this._transposeBoard();\n    }\n    // метод для зсуву і злиття комірок\n    _slideAndMerge(line) {\n        let newLine = line.filter((val)=>val); // видаляємо нулі\n        for(let i = 0; i < newLine.length - 1; i++)if (newLine[i] === newLine[i + 1]) {\n            newLine[i] *= 2;\n            this.score += newLine[i]; // додаємо очки\n            newLine[i + 1] = 0;\n        }\n        newLine = newLine.filter((val)=>val); // видаляємо злиті комірки\n        while(newLine.length < 4)newLine.push(0); // заповнємо нулями нулями\n        return newLine;\n    }\n    // транспонування\n    _transposeBoard() {\n        const newBoard = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++)newBoard[i][j] = this.board[j][i];\n        this.board = newBoard;\n    }\n    // отримання кількості очок\n    getScore() {\n        return this.score;\n    }\n    // отримання дошки для гри\n    getState() {\n        return this.board;\n    }\n    // отримання статусу гру\n    getStatus() {\n        return this.status;\n    }\n    // початок гри\n    start() {\n        this.board = this._generateEmptyBoard(); // Ensure the board is empty\n        this.score = 0;\n        this.status = \"playing\";\n        this._addRandomTile(); // Add one tile\n        this._addRandomTile(); // Add another tile\n        this._checkGameStatus(); // Check if game status needs to be updated\n    }\n    // Restart the game\n    restart() {\n        this.start(); // Use the start method to reset and initialize the game\n    }\n    // Add your own methods here\n    // створення рандомної дощечки\n    _addRandomTile() {\n        const emptyCells = [];\n        // пошук усіх пустих дощечок\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        // добавлення рандомного числа 2/4 в одну з пустих комірок\n        if (emptyCells.length > 0) {\n            const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    // зміна статусу гри win/lose\n    _checkGameStatus() {\n        if (this.board.some((row)=>row.includes(2048))) this.status = \"win\";\n        if (this._noMoreMoves()) this.status = \"lose\";\n    }\n    // перевірка чи є ще можливі кроки у грі. повертає boolean\n    _noMoreMoves() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            // перевіряє наявність порожніх клітинок\n            if (this.board[row][col] === 0) return false;\n            // перевіряє чи можливо об'єднати дві сусідні дощечки по колонках\n            if (col < 3 && this.board[row][col] === this.board[row][col + 1]) return false;\n            // перевіряє чи можливо об'єднати дві сусідні дощечки по рядках\n            if (row < 3 && this.board[row][col] === this.board[row + 1][col]) return false;\n        }\n        return true;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\n// console.log(game.getState());\n// game.moveLeft();\n// console.log(game.getState());\ndocument.addEventListener(\"keydown\", (event)=>{\n    switch(event.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    $09e991522ca7e64e$var$workingWithHTMLFile();\n});\nfunction $09e991522ca7e64e$var$workingWithHTMLFile() {\n    // Update the board display\n    const board = $09e991522ca7e64e$var$game.getState();\n    const cells = document.querySelectorAll(\".field-cell\");\n    cells.forEach((cell, i)=>{\n        const value = board[Math.floor(i / 4)][i % 4];\n        cell.textContent = value || \"\";\n        cell.className = `field-cell ${value ? `field-cell--${value}` : \"\"}`;\n    });\n    // Update the game status message\n    const status = $09e991522ca7e64e$var$game.getStatus();\n    document.querySelector(\".message-win\").classList.toggle(\"hidden\", status !== \"win\");\n    document.querySelector(\".message-lose\").classList.toggle(\"hidden\", status !== \"lose\");\n    document.querySelector(\".message-start\").classList.toggle(\"hidden\", status === \"playing\");\n    // Button functionality\n    const button = document.querySelector(\".button\");\n    button.removeEventListener(\"click\", $09e991522ca7e64e$var$handleButtonClick); // Remove previous event listener\n    button.addEventListener(\"click\", $09e991522ca7e64e$var$handleButtonClick); // Add new event listener\n    if (status === \"playing\") {\n        button.classList.remove(\"start\");\n        button.classList.add(\"restart\");\n        button.textContent = \"Restart\";\n    } else {\n        button.classList.remove(\"restart\");\n        button.classList.add(\"start\");\n        button.textContent = \"Start\";\n    }\n    // Update the score display\n    document.querySelector(\".game-score\").textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$handleButtonClick(event) {\n    event.preventDefault(); // Prevent default action\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") $09e991522ca7e64e$var$game.restart(); // Restart the game if currently playing\n    else $09e991522ca7e64e$var$game.start(); // Start a new game if not playing\n    $09e991522ca7e64e$var$workingWithHTMLFile(); // Update the display\n}\n// Initialize the board display\n$09e991522ca7e64e$var$workingWithHTMLFile();\n\n\n//# sourceMappingURL=index.51f3c029.js.map\n","/* eslint-disable max-len */\n/* eslint-disable no-shadow */\n'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\n// console.log(game.getState());\n// game.moveLeft();\n// console.log(game.getState());\n\ndocument.addEventListener('keydown', (event) => {\n  switch (event.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n\n  workingWithHTMLFile();\n});\n\nfunction workingWithHTMLFile() {\n  // Update the board display\n  const board = game.getState();\n  const cells = document.querySelectorAll('.field-cell');\n\n  cells.forEach((cell, i) => {\n    const value = board[Math.floor(i / 4)][i % 4];\n\n    cell.textContent = value || '';\n    cell.className = `field-cell ${value ? `field-cell--${value}` : ''}`;\n  });\n\n  // Update the game status message\n  const status = game.getStatus();\n\n  document.querySelector('.message-win').classList.toggle('hidden', status !== 'win');\n  document.querySelector('.message-lose').classList.toggle('hidden', status !== 'lose');\n  document.querySelector('.message-start').classList.toggle('hidden', status === 'playing');\n\n  // Button functionality\n  const button = document.querySelector('.button');\n\n  button.removeEventListener('click', handleButtonClick); // Remove previous event listener\n  button.addEventListener('click', handleButtonClick); // Add new event listener\n\n  if (status === 'playing') {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  } else {\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n  }\n\n  // Update the score display\n  document.querySelector('.game-score').textContent = game.getScore();\n}\n\nfunction handleButtonClick(event) {\n  event.preventDefault(); // Prevent default action\n\n  if (game.getStatus() === 'playing') {\n    game.restart(); // Restart the game if currently playing\n  } else {\n    game.start(); // Start a new game if not playing\n  }\n\n  workingWithHTMLFile(); // Update the display\n}\n\n// Initialize the board display\nworkingWithHTMLFile();\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.state = initialState;\n    this.board = initialState || this._generateEmptyBoard();\n    this.score = 0;\n    this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n  }\n  /*\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n\n  // генерація первинної пустої дошки для гри\n  _generateEmptyBoard() {\n    return [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  }\n\n  // основний метод для переміщення\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = 0; i < 4; i++) {\n      const line = this.board[i];\n      const newLine = this._slideAndMerge(line);\n\n      // перевірка чи змінилась дошка\n      if (newLine.join('') !== line.join('')) {\n        moved = true;\n      }\n      this.board[i] = newLine;\n    }\n\n    // якщо була зміщена лінія, то додається\n    // рандомна плитка та перевіряється статус гри\n    if (moved) {\n      this._addRandomTile();\n      this._checkGameStatus();\n    }\n  }\n\n  moveRight() {\n    this.board = this.board.map((row) => row.reverse()); // обертаємо дошку\n    this.moveLeft();\n    this.board = this.board.map((row) => row.reverse());\n  }\n\n  moveUp() {\n    // eslint-disable-next-line max-len\n    this._transposeBoard(); // транспонуємо матрицю, щоб використати метод moveLeft\n    this.moveLeft();\n    this._transposeBoard();\n  }\n\n  moveDown() {\n    this._transposeBoard();\n    this.board = this.board.map((row) => row.reverse());\n    this.moveLeft();\n    this.board = this.board.map((row) => row.reverse());\n    this._transposeBoard();\n  }\n\n  // метод для зсуву і злиття комірок\n  _slideAndMerge(line) {\n    let newLine = line.filter((val) => val); // видаляємо нулі\n\n    for (let i = 0; i < newLine.length - 1; i++) {\n      if (newLine[i] === newLine[i + 1]) {\n        newLine[i] *= 2;\n        this.score += newLine[i]; // додаємо очки\n        newLine[i + 1] = 0;\n      }\n    }\n\n    newLine = newLine.filter((val) => val); // видаляємо злиті комірки\n\n    while (newLine.length < 4) {\n      newLine.push(0); // заповнємо нулями нулями\n    }\n\n    return newLine;\n  }\n\n  // транспонування\n  _transposeBoard() {\n    const newBoard = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        newBoard[i][j] = this.board[j][i];\n      }\n    }\n\n    this.board = newBoard;\n  }\n\n  // отримання кількості очок\n  getScore() {\n    return this.score;\n  }\n\n  // отримання дошки для гри\n  getState() {\n    return this.board;\n  }\n\n  // отримання статусу гру\n  getStatus() {\n    return this.status;\n  }\n\n  // початок гри\n  start() {\n    this.board = this._generateEmptyBoard(); // Ensure the board is empty\n    this.score = 0;\n    this.status = 'playing';\n    this._addRandomTile(); // Add one tile\n    this._addRandomTile(); // Add another tile\n    this._checkGameStatus(); // Check if game status needs to be updated\n  }\n\n  // Restart the game\n  restart() {\n    this.start(); // Use the start method to reset and initialize the game\n  }\n\n  // Add your own methods here\n\n  // створення рандомної дощечки\n  _addRandomTile() {\n    const emptyCells = [];\n\n    // пошук усіх пустих дощечок\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({\n            row, col,\n          });\n        }\n      }\n    }\n\n    // добавлення рандомного числа 2/4 в одну з пустих комірок\n    if (emptyCells.length > 0) {\n      const randomCell\n        = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  // зміна статусу гри win/lose\n  _checkGameStatus() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    }\n\n    if (this._noMoreMoves()) {\n      this.status = 'lose';\n    }\n  }\n\n  // перевірка чи є ще можливі кроки у грі. повертає boolean\n  _noMoreMoves() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        // перевіряє наявність порожніх клітинок\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n\n        // перевіряє чи можливо об'єднати дві сусідні дощечки по колонках\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return false;\n        }\n\n        // перевіряє чи можливо об'єднати дві сусідні дощечки по рядках\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","state","board","_generateEmptyBoard","score","status","moveLeft","moved","i","line","newLine","_slideAndMerge","join","_addRandomTile","_checkGameStatus","moveRight","map","row","reverse","moveUp","_transposeBoard","moveDown","filter","val","length","push","newBoard","j","getScore","getState","getStatus","start","restart","emptyCells","col","randomCell","Math","floor","random","some","includes","_noMoreMoves","$09e991522ca7e64e$var$workingWithHTMLFile","cells","document","querySelectorAll","forEach","cell","value","textContent","className","querySelector","classList","toggle","button","removeEventListener","$09e991522ca7e64e$var$handleButtonClick","addEventListener","remove","add","event","preventDefault","key"],"version":3,"file":"index.51f3c029.js.map"}